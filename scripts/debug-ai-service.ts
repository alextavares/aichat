#!/usr/bin/env npx tsx

import { config } from 'dotenv'
config()

import { aiService } from '../lib/ai/ai-service'

async function debugAIService() {
  console.log('üîç DEBUGANDO AI SERVICE\n')
  
  console.log('1Ô∏è‚É£ Testando providers dispon√≠veis...')
  try {
    // @ts-ignore - Acessando propriedade privada
    const providers = aiService.providers
    console.log('   - Providers registrados:')
    for (const [name, provider] of providers) {
      console.log(`     ${name}: ${provider.isConfigured() ? '‚úÖ' : '‚ùå'}`)
    }
  } catch (error) {
    console.log('   ‚ùå ERRO:', error.message)
  }
  
  console.log('\n2Ô∏è‚É£ Testando getProviderForModel...')
  try {
    // @ts-ignore - Acessando m√©todo privado
    const provider = aiService.getProviderForModel('mistral-7b')
    console.log('   ‚úÖ Provider encontrado:', provider.id)
    console.log('   - Configurado:', provider.isConfigured())
  } catch (error) {
    console.log('   ‚ùå ERRO:', error.message)
  }
  
  console.log('\n3Ô∏è‚É£ Testando gera√ß√£o direta...')
  try {
    const response = await aiService.generateResponse(
      [{ role: 'user', content: 'Teste r√°pido' }],
      'mistral-7b'
    )
    console.log('   ‚úÖ Sucesso! Resposta:', response.content.substring(0, 50))
  } catch (error) {
    console.log('   ‚ùå ERRO:', error.message)
  }
  
  console.log('\n4Ô∏è‚É£ Testando OpenRouter Provider diretamente...')
  try {
    // @ts-ignore
    const openRouterProvider = aiService.getProvider('openrouter')
    console.log('   - Provider ID:', openRouterProvider.id)
    console.log('   - Configurado:', openRouterProvider.isConfigured())
    
    const response = await openRouterProvider.generateResponse(
      [{ role: 'user', content: 'Test direto' }],
      'mistral-7b'
    )
    console.log('   ‚úÖ Teste direto funcionou!')
  } catch (error) {
    console.log('   ‚ùå ERRO no teste direto:', error.message)
  }
}

debugAIService().catch(console.error)