import { MercadoPagoConfig, Payment, Preference } from 'mercadopago'
import dotenv from 'dotenv'

dotenv.config({ path: '.env.local' })

async function testMercadoPagoConnection() {
  console.log('üîç Testando conex√£o com Mercado Pago...\n')

  // Verificar vari√°veis de ambiente
  const requiredEnvVars = [
    'MERCADOPAGO_ACCESS_TOKEN',
    'MERCADOPAGO_PUBLIC_KEY',
  ]

  const missingVars = requiredEnvVars.filter(varName => !process.env[varName])
  
  if (missingVars.length > 0) {
    console.error('‚ùå Vari√°veis de ambiente faltando:')
    missingVars.forEach(varName => console.error(`   - ${varName}`))
    console.log('\nüí° Adicione essas vari√°veis ao seu arquivo .env.local')
    process.exit(1)
  }

  console.log('‚úÖ Vari√°veis de ambiente configuradas\n')

  try {
    // Inicializar cliente
    const client = new MercadoPagoConfig({
      accessToken: process.env.MERCADOPAGO_ACCESS_TOKEN!,
      options: { timeout: 5000 }
    })

    console.log('‚úÖ Cliente Mercado Pago inicializado\n')

    // Testar cria√ß√£o de prefer√™ncia
    console.log('üìù Criando prefer√™ncia de teste...')
    
    const preference = new Preference(client)
    const testPreference = await preference.create({
      body: {
        items: [
          {
            id: 'test-item',
            title: 'Teste de Integra√ß√£o',
            quantity: 1,
            unit_price: 10,
            currency_id: 'BRL',
          }
        ],
        back_urls: {
          success: 'http://localhost:3000/success',
          failure: 'http://localhost:3000/failure',
          pending: 'http://localhost:3000/pending',
        },
        auto_return: 'approved',
      }
    })

    console.log('‚úÖ Prefer√™ncia criada com sucesso!')
    console.log(`   ID: ${preference.id}`)
    console.log(`   Init Point: ${preference.init_point}\n`)

    // Verificar se est√° em modo de teste
    if (process.env.MERCADOPAGO_ACCESS_TOKEN?.startsWith('TEST-')) {
      console.log('‚ö†Ô∏è  Voc√™ est√° usando credenciais de TESTE')
      console.log('   Para produ√ß√£o, use as credenciais reais\n')
    }

    // Testar Payment API
    console.log('üí≥ Testando API de Pagamentos...')
    const payment = new Payment(client)
    
    // Listar m√©todos de pagamento dispon√≠veis
    const paymentMethods = await fetch(
      'https://api.mercadopago.com/v1/payment_methods',
      {
        headers: {
          'Authorization': `Bearer ${process.env.MERCADOPAGO_ACCESS_TOKEN}`
        }
      }
    ).then(res => res.json())

    const pixMethod = paymentMethods.find((m: any) => m.id === 'pix')
    const boletoMethod = paymentMethods.find((m: any) => m.payment_type_id === 'ticket')

    console.log('‚úÖ M√©todos de pagamento dispon√≠veis:')
    if (pixMethod) console.log('   - PIX ‚úì')
    if (boletoMethod) console.log('   - Boleto ‚úì')
    console.log('   - Cart√£o de Cr√©dito ‚úì\n')

    console.log('üéâ Teste conclu√≠do com sucesso!')
    console.log('\nüìã Pr√≥ximos passos:')
    console.log('1. Configure o webhook no painel do Mercado Pago')
    console.log('2. Use ngrok para testar webhooks localmente')
    console.log('3. Teste um pagamento real no checkout')
    console.log('4. Monitore os logs do webhook\n')

  } catch (error) {
    console.error('‚ùå Erro ao testar Mercado Pago:')
    console.error(error)
    
    if ((error as any).status === 401) {
      console.error('\n‚ö†Ô∏è  Token de acesso inv√°lido!')
      console.error('   Verifique se copiou o token correto do painel')
    }
    
    process.exit(1)
  }
}

// Executar teste
testMercadoPagoConnection()