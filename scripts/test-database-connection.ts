import { prisma } from '../lib/prisma'

async function testDatabaseConnection() {
  console.log('üîç Testando conex√£o com banco de dados de produ√ß√£o...\n')
  
  try {
    // Testar conex√£o b√°sica
    console.log('1. Conectando ao banco...')
    await prisma.$connect()
    console.log('‚úÖ Conex√£o estabelecida com sucesso')
    
    // Testar queries b√°sicas
    console.log('\n2. Testando queries...')
    const userCount = await prisma.user.count()
    console.log(`‚úÖ Usu√°rios no banco: ${userCount}`)
    
    // Verificar tabelas essenciais
    console.log('\n3. Verificando estrutura do banco...')
    
    const conversationCount = await prisma.conversation.count()
    console.log(`‚úÖ Conversas: ${conversationCount}`)
    
    const messageCount = await prisma.message.count()
    console.log(`‚úÖ Mensagens: ${messageCount}`)
    
    // Verificar usu√°rio de teste
    console.log('\n4. Verificando usu√°rio de teste...')
    const testUser = await prisma.user.findUnique({
      where: { email: 'test@example.com' }
    })
    
    if (testUser) {
      console.log('‚úÖ Usu√°rio de teste encontrado:', {
        id: testUser.id,
        email: testUser.email,
        name: testUser.name,
        planType: testUser.planType,
        createdAt: testUser.createdAt
      })
    } else {
      console.log('‚ùå Usu√°rio de teste N√ÉO encontrado')
      console.log('üí° Execute: npx tsx scripts/create-test-user.ts')
    }
    
    // Verificar se h√° usu√°rios ativos
    console.log('\n5. Verificando usu√°rios recentes...')
    const recentUsers = await prisma.user.findMany({
      take: 3,
      orderBy: { createdAt: 'desc' },
      select: { email: true, name: true, createdAt: true, planType: true }
    })
    
    if (recentUsers.length > 0) {
      console.log('‚úÖ Usu√°rios recentes:')
      recentUsers.forEach(user => {
        console.log(`  - ${user.email} (${user.planType}) - ${user.createdAt}`)
      })
    }
    
    console.log('\nüéâ BANCO DE DADOS: FUNCIONANDO CORRETAMENTE')
    
  } catch (error) {
    console.error('‚ùå ERRO NA CONEX√ÉO COM O BANCO:')
    console.error('Erro:', error.message)
    
    if (error.code === 'P1001') {
      console.log('\nüí° SOLU√á√ÉO: Verificar se o banco est√° online e acess√≠vel')
    } else if (error.code === 'P1002') {
      console.log('\nüí° SOLU√á√ÉO: Verificar timeout de conex√£o')
    } else if (error.code === 'P1008') {
      console.log('\nüí° SOLU√á√ÉO: Verificar se a DATABASE_URL est√° correta')
    }
    
    console.log('\nüîß Passos para corre√ß√£o:')
    console.log('1. Verificar vari√°vel DATABASE_URL em produ√ß√£o')
    console.log('2. Verificar se o banco Supabase est√° online')
    console.log('3. Verificar regras de firewall/rede')
    console.log('4. Verificar se as credenciais est√£o corretas')
    
  } finally {
    await prisma.$disconnect()
    console.log('\nüîå Conex√£o encerrada')
  }
}

if (require.main === module) {
  testDatabaseConnection()
}

export { testDatabaseConnection }