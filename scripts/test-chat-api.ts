#!/usr/bin/env tsx

// Teste da API de chat
import { prisma } from '../lib/prisma'

async function testChatAPI() {
  console.log('üß™ TESTANDO API DE CHAT\n')

  try {
    // 1. Buscar usu√°rio de teste
    const user = await prisma.user.findFirst({
      where: { email: 'test@example.com' }
    })

    if (!user) {
      console.error('‚ùå Usu√°rio de teste n√£o encontrado')
      return
    }

    console.log(`‚úÖ Usu√°rio encontrado: ${user.id}`)
    console.log(`   ‚Ä¢ Email: ${user.email}`)
    console.log(`   ‚Ä¢ Plano: ${user.planType}`)
    console.log(`   ‚Ä¢ Cr√©ditos: ${user.creditBalance}`)

    // 2. Testar chamada da API de chat
    const testMessage = {
      messages: [
        { role: 'user', content: 'Ol√°, como voc√™ est√°?' }
      ],
      model: 'gpt-4o-mini'
    }

    console.log('\nüîÑ Testando API de chat...')
    console.log(`   ‚Ä¢ Modelo: ${testMessage.model}`)
    console.log(`   ‚Ä¢ Mensagem: ${testMessage.messages[0].content}`)

    // Simular requisi√ß√£o para API de chat
    const response = await fetch('http://localhost:3050/api/chat', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        // Note: Em produ√ß√£o seria necess√°rio incluir cookie de sess√£o
      },
      body: JSON.stringify(testMessage)
    })

    console.log(`   ‚Ä¢ Status: ${response.status}`)
    
    if (response.ok) {
      const data = await response.json()
      console.log('‚úÖ Resposta da API:')
      console.log(`   ‚Ä¢ Mensagem: ${data.message?.substring(0, 100)}...`)
      console.log(`   ‚Ä¢ Tokens: ${JSON.stringify(data.tokensUsed)}`)
      console.log(`   ‚Ä¢ Cr√©ditos: ${JSON.stringify(data.credits)}`)
    } else {
      const error = await response.text()
      console.log('‚ùå Erro na API:')
      console.log(`   ‚Ä¢ ${error}`)
    }

  } catch (error) {
    console.error('‚ùå Erro no teste:', error)
  } finally {
    await prisma.$disconnect()
  }
}

testChatAPI()