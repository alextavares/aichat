#!/usr/bin/env tsx

// Teste do sistema de crÃ©ditos integrado com modelos do InnerAI
import { 
  getModelById, 
  calculateCreditsForTokens, 
  modelRequiresCredits,
  getModelsForPlan,
  INNERAI_MODELS
} from '../lib/ai/innerai-models-config'

console.log('ðŸ”¬ Testando Sistema de CrÃ©ditos Integrado com InnerAI Models\n')

// 1. Testar configuraÃ§Ã£o de modelos
console.log('ðŸ“‹ Modelos disponÃ­veis por categoria:')
const fastModels = INNERAI_MODELS.filter(m => m.category === 'fast' && m.isAvailable)
const advancedModels = INNERAI_MODELS.filter(m => m.category === 'advanced' && m.isAvailable)
const reasoningModels = INNERAI_MODELS.filter(m => m.category === 'reasoning' && m.isAvailable)

console.log(`  â€¢ Modelos RÃ¡pidos (FREE): ${fastModels.length}`)
console.log(`  â€¢ Modelos AvanÃ§ados (LITE+): ${advancedModels.length}`)
console.log(`  â€¢ RaciocÃ­nio Profundo (PRO+): ${reasoningModels.length}`)

// 2. Testar cÃ¡lculo de crÃ©ditos
console.log('\nðŸ’° Testando cÃ¡lculo de crÃ©ditos:')

const testCases = [
  { modelId: 'gpt-4o-mini', inputTokens: 100, outputTokens: 200 },
  { modelId: 'claude-4-sonnet', inputTokens: 500, outputTokens: 800 },
  { modelId: 'o3', inputTokens: 200, outputTokens: 400 },
  { modelId: 'gemini-2.5-flash', inputTokens: 1000, outputTokens: 1500 }
]

for (const testCase of testCases) {
  const model = getModelById(testCase.modelId)
  if (model) {
    const credits = calculateCreditsForTokens(
      testCase.modelId, 
      testCase.inputTokens, 
      testCase.outputTokens
    )
    const requiresCredits = modelRequiresCredits(testCase.modelId)
    
    console.log(`  â€¢ ${model.name} (${model.category}):`)
    console.log(`    - Tokens: ${testCase.inputTokens}/${testCase.outputTokens}`)
    console.log(`    - CrÃ©ditos: ${credits}`)
    console.log(`    - Requer crÃ©ditos: ${requiresCredits ? 'Sim' : 'NÃ£o (FREE)'}`)
    console.log(`    - Plano mÃ­nimo: ${model.planRequired}`)
  }
}

// 3. Testar modelos por plano
console.log('\nðŸ“Š Modelos disponÃ­veis por plano:')
const plans = ['FREE', 'LITE', 'PRO', 'ENTERPRISE'] as const

for (const plan of plans) {
  const models = getModelsForPlan(plan)
  console.log(`  â€¢ ${plan}: ${models.length} modelos`)
  
  const byCategory = {
    fast: models.filter(m => m.category === 'fast').length,
    advanced: models.filter(m => m.category === 'advanced').length,
    reasoning: models.filter(m => m.category === 'reasoning').length
  }
  
  console.log(`    - RÃ¡pidos: ${byCategory.fast}, AvanÃ§ados: ${byCategory.advanced}, RaciocÃ­nio: ${byCategory.reasoning}`)
}

// 4. Simular cenÃ¡rios de uso
console.log('\nðŸŽ¯ CenÃ¡rios de uso simulados:')

const scenarios = [
  {
    plan: 'FREE',
    model: 'gpt-4o-mini',
    usage: 'Chat bÃ¡sico com 50 mensagens/dia'
  },
  {
    plan: 'LITE', 
    model: 'claude-4-sonnet',
    usage: 'AnÃ¡lise de cÃ³digo com 20 mensagens/dia'
  },
  {
    plan: 'PRO',
    model: 'o3',
    usage: 'ResoluÃ§Ã£o de problemas complexos, 10 mensagens/dia'
  }
]

for (const scenario of scenarios) {
  const model = getModelById(scenario.model)
  if (model) {
    const dailyCredits = calculateCreditsForTokens(scenario.model, 150, 300) * (
      scenario.plan === 'FREE' ? 50 : 
      scenario.plan === 'LITE' ? 20 : 10
    )
    
    console.log(`  â€¢ ${scenario.plan} - ${model.name}:`)
    console.log(`    - Uso: ${scenario.usage}`)
    console.log(`    - CrÃ©ditos/dia: ${dailyCredits}`)
    console.log(`    - CrÃ©ditos/mÃªs: ${dailyCredits * 30}`)
  }
}

console.log('\nâœ… Teste do sistema de crÃ©ditos concluÃ­do!')
console.log('\nðŸ“ˆ EstatÃ­sticas:')
console.log(`  â€¢ Total de modelos configurados: ${INNERAI_MODELS.length}`)
console.log(`  â€¢ Modelos disponÃ­veis: ${INNERAI_MODELS.filter(m => m.isAvailable).length}`)
console.log(`  â€¢ Modelos FREE (sem crÃ©ditos): ${INNERAI_MODELS.filter(m => m.planRequired === 'FREE').length}`)
console.log(`  â€¢ Modelos que consomem crÃ©ditos: ${INNERAI_MODELS.filter(m => m.planRequired !== 'FREE').length}`)