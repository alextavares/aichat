#!/usr/bin/env tsx

// Teste de integra√ß√£o completa do chat
import * as dotenv from 'dotenv'
import * as path from 'path'

// Carregar .env.local
dotenv.config({ path: path.join(process.cwd(), '.env.local') })

import { prisma } from '../lib/prisma'
import { aiService } from '../lib/ai/ai-service'
import { CreditService } from '../lib/credit-service'
import { 
  getModelById,
  calculateCreditsForTokens,
  modelRequiresCredits 
} from '../lib/ai/innerai-models-config'

async function testChatIntegration() {
  console.log('üß™ TESTE DE INTEGRA√á√ÉO COMPLETA DO CHAT\n')

  try {
    // 1. Verificar usu√°rio de teste
    const user = await prisma.user.findFirst({
      where: { email: 'test@example.com' }
    })

    if (!user) {
      console.error('‚ùå Usu√°rio de teste n√£o encontrado')
      return
    }

    console.log(`‚úÖ Usu√°rio: ${user.email} (ID: ${user.id})`)
    console.log(`   ‚Ä¢ Plano: ${user.planType}`)
    console.log(`   ‚Ä¢ Cr√©ditos: ${user.creditBalance}`)

    // 2. Dar cr√©ditos ao usu√°rio se n√£o tiver
    if (user.creditBalance < 100) {
      console.log('\nüí∞ Adicionando cr√©ditos ao usu√°rio...')
      await CreditService.addCredits(
        user.id,
        1000,
        'Cr√©ditos de teste para desenvolvimento'
      )
      console.log('‚úÖ 1000 cr√©ditos adicionados')
    }

    // 3. Testar modelo FREE (n√£o consome cr√©ditos)
    console.log('\nüîÑ Testando modelo FREE (gpt-4o-mini)...')
    const freeModel = 'gpt-4o-mini'
    const modelConfig = getModelById(freeModel)
    
    if (modelConfig) {
      console.log(`   ‚Ä¢ Modelo: ${modelConfig.name}`)
      console.log(`   ‚Ä¢ Categoria: ${modelConfig.category}`)
      console.log(`   ‚Ä¢ Requer cr√©ditos: ${modelRequiresCredits(freeModel)}`)
      
      try {
        const response = await aiService.generateResponse(
          [{ role: 'user', content: 'Diga apenas "Ol√°!"' }],
          freeModel
        )
        
        console.log('‚úÖ Resposta recebida:')
        console.log(`   ‚Ä¢ Conte√∫do: ${response.content}`)
        console.log(`   ‚Ä¢ Tokens: ${JSON.stringify(response.tokensUsed)}`)
        
        // Calcular cr√©ditos que seriam consumidos
        const creditsNeeded = calculateCreditsForTokens(
          freeModel,
          response.tokensUsed.input,
          response.tokensUsed.output
        )
        console.log(`   ‚Ä¢ Cr√©ditos calculados: ${creditsNeeded}`)
        
      } catch (error) {
        console.error('‚ùå Erro no modelo FREE:', error)
      }
    }

    // 4. Testar modelo que consome cr√©ditos
    console.log('\nüîÑ Testando modelo AVAN√áADO (claude-4-sonnet)...')
    const paidModel = 'claude-4-sonnet'
    const paidModelConfig = getModelById(paidModel)
    
    if (paidModelConfig) {
      console.log(`   ‚Ä¢ Modelo: ${paidModelConfig.name}`)
      console.log(`   ‚Ä¢ Categoria: ${paidModelConfig.category}`)
      console.log(`   ‚Ä¢ Requer cr√©ditos: ${modelRequiresCredits(paidModel)}`)
      
      try {
        const response = await aiService.generateResponse(
          [{ role: 'user', content: 'Diga apenas "Ol√°!"' }],
          paidModel
        )
        
        console.log('‚úÖ Resposta recebida:')
        console.log(`   ‚Ä¢ Conte√∫do: ${response.content}`)
        console.log(`   ‚Ä¢ Tokens: ${JSON.stringify(response.tokensUsed)}`)
        
        // Calcular e consumir cr√©ditos
        const creditsNeeded = calculateCreditsForTokens(
          paidModel,
          response.tokensUsed.input,
          response.tokensUsed.output
        )
        console.log(`   ‚Ä¢ Cr√©ditos necess√°rios: ${creditsNeeded}`)
        
        // Testar consumo de cr√©ditos
        const creditResult = await CreditService.consumeCredits(
          user.id,
          creditsNeeded,
          `Teste chat com ${paidModelConfig.name}`,
          'test-conversation'
        )
        
        if (creditResult.success) {
          console.log('‚úÖ Cr√©ditos consumidos com sucesso')
          const newBalance = await CreditService.getUserBalance(user.id)
          console.log(`   ‚Ä¢ Novo saldo: ${newBalance}`)
        }
        
      } catch (error) {
        console.error('‚ùå Erro no modelo AVAN√áADO:', error)
      }
    }

    console.log('\n‚úÖ TESTE DE INTEGRA√á√ÉO CONCLU√çDO!')
    console.log('\nüéØ Pr√≥ximo passo: Testar no navegador em http://localhost:3050')

  } catch (error) {
    console.error('‚ùå Erro no teste de integra√ß√£o:', error)
  } finally {
    await prisma.$disconnect()
  }
}

testChatIntegration()