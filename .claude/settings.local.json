{
  "permissions": {
    "allow": [
      "Bash(npx create-next-app:*)",
      "Bash(mkdir:*)",
      "Bash(npx shadcn@latest init:*)",
      "Bash(npm --version)",
      "Bash(node --version)",
      "Bash(npm install:*)",
      "Bash(ls:*)",
      "Bash(cp:*)",
      "Bash(rm:*)",
      "Bash(mv:*)",
      "Bash(npx prisma:*)",
      "Bash(npm run dev:*)",
      "Bash(yarn install)",
      "Bash(openssl rand:*)",
      "mcp__supabase__list_projects",
      "mcp__supabase__apply_migration",
      "mcp__supabase__get_project_url",
      "mcp__supabase__get_project",
      "Bash(npx:*)",
      "Bash(./node_modules/.bin/prisma db:*)",
      "mcp__supabase__list_tables",
      "Bash(find:*)",
      "WebFetch(domain:localhost)",
      "Bash(curl:*)",
      "Bash(pkill:*)",
      "Bash(true)",
      "Bash(grep:*)",
      "Bash(touch:*)",
      "Bash(git init:*)",
      "Bash(git add:*)",
      "Bash(app/api/chat/stream/route.ts )",
      "Bash(app/api/conversations/route.ts )",
      "Bash(app/api/conversations/[id]/route.ts )",
      "Bash(app/api/usage/today/route.ts )",
      "Bash(components/chat/chat-interface-streaming.tsx )",
      "Bash(components/chat/conversation-history.tsx )",
      "Bash(components/usage/usage-indicator.tsx )",
      "Bash(components/ui/scroll-area.tsx )",
      "Bash(middleware.ts )",
      "Bash(prisma/seed.ts )",
      "Bash(app/dashboard/page.tsx )",
      "Bash(lib/db.ts )",
      "Bash(.env.local )",
      "Bash(*.md)",
      "Bash(app/api/conversations/route.ts )",
      "Bash(\"app/api/conversations/[id]/route.ts\" )",
      "Bash(app/api/usage/today/route.ts )",
      "Bash(components/chat/chat-interface-streaming.tsx )",
      "Bash(components/chat/conversation-history.tsx )",
      "Bash(components/usage/usage-indicator.tsx )",
      "Bash(components/ui/scroll-area.tsx )",
      "Bash(middleware.ts )",
      "Bash(prisma/seed.ts )",
      "Bash(app/dashboard/page.tsx )",
      "Bash(lib/db.ts )",
      "Bash(prisma/schema.prisma )",
      "Bash(app/api/auth/register/route.ts )",
      "Bash(app/api/auth/register-mock/route.ts )",
      "Bash(app/auth/signup-mock/page.tsx )",
      "Bash(app/auth/signup/page.tsx)",
      "Bash(git commit:*)",
      "Bash(git config:*)",
      "Bash(gh auth:*)",
      "Bash(git remote add:*)",
      "Bash(git branch -M main)",
      "Bash(git push:*)",
      "Bash(git remote set-url:*)",
      "Bash(mcp-server-github:*)",
      "Bash(tar:*)",
      "Bash(gh repo view:*)",
      "WebFetch(domain:github.com)",
      "Bash(npm run seed:*)",
      "Bash(node:*)",
      "Bash(chmod:*)",
      "Bash(./test-browser.sh:*)",
      "Bash(claude --version)",
      "mcp__wordpress__wp_get_posts",
      "Bash(cat:*)",
      "Bash(adb:*)",
      "Bash(java:*)",
      "Bash(sudo apt:*)",
      "Bash(sudo apt install:*)",
      "Bash(wget:*)",
      "Bash(./jdk-17.0.13+11/bin/java:*)",
      "Bash(PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true npm install puppeteer-core)",
      "Bash(npm test)",
      "Bash(./test-auth.sh:*)",
      "Bash(bash:*)",
      "mcp__wordpress__wp_create_post",
      "Bash(git reset:*)",
      "Bash(git pull:*)",
      "Bash(git rebase:*)",
      "Bash(git clone:*)",
      "Bash(go install:*)",
      "Bash(echo $PATH)",
      "Bash(sudo tar:*)",
      "Bash(source ~/.bashrc)",
      "Bash(go:*)",
      "Bash(export PATH=$HOME/go-install/go/bin:$HOME/go/bin:$PATH)",
      "Bash(wails:*)",
      "Bash($HOME/go-install/go/bin/go version)",
      "mcp__memory__create_entities",
      "mcp__memory__create_relations",
      "mcp__desktop-commander__execute_command",
      "mcp__desktop-commander__read_output",
      "Bash(npm run build:*)",
      "Bash(npm run type-check:*)",
      "Bash(npm run lint:*)",
      "Bash(npm i:*)",
      "mcp__playwright__browser_navigate",
      "mcp__puppeteer__puppeteer_navigate",
      "mcp__puppeteer__puppeteer_screenshot",
      "mcp__playwright__browser_install",
      "Bash(HOSTNAME=0.0.0.0 npm run dev)",
      "Bash(sed:*)",
      "Bash(ss:*)",
      "Bash(PLAYWRIGHT_BROWSERS_PATH=$HOME/.cache/ms-playwright npx playwright install chromium)",
      "Bash(export PLAYWRIGHT_BROWSERS_PATH=$HOME/.cache/ms-playwright)",
      "Bash(PLAYWRIGHT_BROWSERS_PATH=$HOME/.cache/ms-playwright npm run test:e2e -- --list)",
      "Bash(PLAYWRIGHT_BROWSERS_PATH=$HOME/.cache/ms-playwright npm run test:e2e -- --grep \"should show login page\")",
      "Bash(timeout 300 npm run build)",
      "Bash(PLAYWRIGHT_BROWSERS_PATH=$HOME/.cache/ms-playwright npx playwright test --headed auth.spec.ts --grep \"should show login page\")",
      "Bash(timeout 10 npm run dev:*)",
      "Bash(npm run:*)",
      "Bash(./fix-import-paths.sh)",
      "Bash(./fix-imports-batch.sh)",
      "Bash(for file in prisma.ts prisma.js auth.ts auth.js stripe.ts stripe.js usage-limits.ts usage-limits.js)",
      "Bash(do if [ -f \"lib/$file\" ])",
      "Bash(then echo \"‚úì lib/$file exists\")",
      "Bash(else echo \"‚úó lib/$file MISSING\")",
      "Bash(fi)",
      "Bash(done)",
      "Bash(echo:*)",
      "mcp__puppeteer__puppeteer_fill",
      "mcp__puppeteer__puppeteer_click",
      "mcp__puppeteer__puppeteer_evaluate",
      "Bash(if [ -f \"prisma/seed.js\" ])",
      "Bash([ -f \"prisma/seed.ts\" ])",
      "Bash(then)",
      "Bash(./fix-modular-tests.sh:*)",
      "mcp__puppeteer__puppeteer_hover",
      "Bash(rg:*)",
      "WebFetch(domain:legacy.reactjs.org)",
      "Bash(PORT=3000 npm run dev 2 >& 1)",
      "Bash(npm cache clean:*)",
      "Bash(timeout 30s npm run dev)",
      "Bash(timeout 10s npx tsc --noEmit --skipLibCheck app/checkout/page.tsx)",
      "Bash(timeout:*)",
      "Bash(sudo chown:*)",
      "Bash(PORT=3005 npx next dev)",
      "Bash(./fix-and-start.sh)",
      "Bash(test:*)",
      "WebFetch(domain:www.mercadopago.com.br)",
      "Bash(npm uninstall:*)",
      "Bash(NODE_ENV=development npx next dev 2 >& 1)",
      "Bash(git checkout:*)",
      "Bash(PORT=3001 npx --yes next@latest dev)",
      "Bash(yarn --version)",
      "Bash(yarn add next react react-dom)",
      "Bash(killall:*)",
      "mcp__fetcher-mcp__fetch_url",
      "Bash(npm search:*)",
      "mcp__mcp-installer__install_repo_mcp_server",
      "Bash(powershell.exe:*)",
      "Bash(pwsh:*)",
      "Bash(./setup-do-mcp.sh:*)",
      "mcp__digitalocean__list_apps",
      "Bash(git merge:*)",
      "mcp__digitalocean__create_app",
      "mcp__digitalocean__list_app_regions",
      "mcp__digitalocean__get_app",
      "mcp__digitalocean__update_app",
      "mcp__digitalocean__get_deployment_logs_url",
      "mcp__digitalocean__list_deployments",
      "mcp__digitalocean__download_logs",
      "mcp__digitalocean__get_deployment",
      "mcp__digitalocean__create_deployment",
      "mcp__github__create_or_update_file",
      "mcp__digitalocean__list_databases_cluster",
      "mcp__digitalocean__create_database_cluster",
      "mcp__playwright__browser_wait_for",
      "mcp__playwright__browser_press_key",
      "mcp__desktop-commander__write_file",
      "WebFetch(domain:openrouter.ai)",
      "WebFetch(domain:appbuild-logs.nyc3.digitaloceanspaces.com)",
      "Bash(git fetch:*)",
      "mcp__browser-tools__getConsoleErrors",
      "WebFetch(domain:innerai.com)",
      "Bash(doctl:*)",
      "Bash(./scripts/test-production.sh:*)",
      "WebFetch(domain:seahorse-app-k5pag.ondigitalocean.app)",
      "Bash(./scripts/test-production-flow.sh:*)",
      "Bash(./scripts/full-payment-diagnostic.sh:*)",
      "Bash(git rm:*)",
      "mcp__brave-search__brave_web_search",
      "Bash(GIT_ASKPASS=echo git push origin main)",
      "Bash(GIT_SSH_COMMAND=\"ssh -i ~/.ssh/id_ed25519_github\" git push origin main)",
      "WebFetch(domain:aichat-alextavares.vercel.app)",
      "WebFetch(domain:innerai-clone.vercel.app)",
      "WebFetch(domain:aichat.vercel.app)",
      "WebFetch(domain:alextavares.github.io)",
      "Bash(./test-production-api.sh:*)",
      "Bash(# Buscar por refer√™ncias aos novos modelos nos arquivos JavaScript da aplica√ß√£o\necho \"\"üîç Buscando novos modelos no c√≥digo da aplica√ß√£o em produ√ß√£o...\"\"\n\n# Baixar e analisar os arquivos JavaScript principais\ncurl -s https://seahorse-app-k5pag.ondigitalocean.app/_next/static/chunks/pages/_app.js 2>/dev/null | grep -i \"\"gpt-4\\.1\\|claude-4-sonnet\\|gemini-2\\.5-pro\\|sabia-3\\.1\\|llama-4-maverick\\|perplexity-sonar\"\" | head -3\n\necho -e \"\"\\nBuscando nos chunks da aplica√ß√£o...\"\"\n# Tentar encontrar o arquivo principal do chunk\nMAIN_CHUNK=$(curl -s https://seahorse-app-k5pag.ondigitalocean.app/dashboard/chat | grep -o ''_next/static/chunks/[^\"\"]*\\.js'' | head -1)\nif [ ! -z \"\"$MAIN_CHUNK\"\" ]; then\n  echo \"\"Analisando chunk: $MAIN_CHUNK\"\"\n  curl -s \"\"https://seahorse-app-k5pag.ondigitalocean.app/$MAIN_CHUNK\"\" | grep -i \"\"advanced\\|reasoning\\|modelos\\|avan√ßados\"\" | head -3\nfi\n\necho -e \"\"\\nProcurando por configura√ß√£o de modelos...\"\"\ncurl -s https://seahorse-app-k5pag.ondigitalocean.app/dashboard/chat | grep -i \"\"model_categories\\|availablemodels\\|openrouter\"\" | head -5)",
      "Bash(docker-mcp:*)",
      "Bash(env)",
      "Bash(compgen:*)",
      "Bash(sudo mv:*)",
      "Bash(export PATH=\"$HOME/bin:$PATH\")",
      "Bash(~/bin/doctl:*)",
      "Bash(mcp list:*)",
      "Bash(mcp:*)",
      "Bash(git branch:*)",
      "Bash(NODE_ENV=production npm run build)",
      "Bash(BASE_URL=https://seahorse-app-k5pag.ondigitalocean.app npm run diagnose:production)"
    ],
    "deny": []
  }
}