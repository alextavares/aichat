generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "windows"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(cuid())
  email           String            @unique
  name            String?
  passwordHash    String?           @map("password_hash")
  planType        String            @default("FREE") @map("plan_type")
  creditBalance   Int               @default(0) @map("credit_balance")
  profileImage    String?           @map("profile_image")
  profession      String?
  organization    String?
  usageType       String?           @map("usage_type")
  professionCategory String?        @map("profession_category")
  phone           String?
  onboardingCompleted Boolean       @default(false) @map("onboarding_completed")
  isActive        Boolean           @default(true) @map("is_active")
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  conversations   Conversation[]
  payments        Payment[]
  promptTemplates PromptTemplate[]
  subscriptions   Subscription[]
  toolUsage       ToolUsage[]
  messageFeedback MessageFeedback[]
  userUsage       UserUsage[]
  templateFavorites TemplateFavorite[]
  knowledgeBase   KnowledgeBase[]
  creditTransactions CreditTransaction[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Conversation {
  id         String    @id @default(cuid())
  userId     String    @map("user_id")
  title      String?
  modelUsed  String?   @map("model_used")
  isArchived Boolean   @default(false) @map("is_archived")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages   Message[]

  @@map("conversations")
}

model Message {
  id              String            @id @default(cuid())
  conversationId  String            @map("conversation_id")
  role            String            // "user", "assistant", "system"
  content         String
  tokensUsed      Int?              @map("tokens_used")
  modelUsed       String?           @map("model_used")
  metadata        String?           // JSON as string
  createdAt       DateTime          @default(now()) @map("created_at")
  conversation    Conversation      @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  messageFeedback MessageFeedback[]

  @@map("messages")
}

model PromptTemplate {
  id              String         @id @default(cuid())
  name            String
  description     String?
  category        String         // "CODING", "WRITING", "BUSINESS", etc.
  templateContent String         @map("template_content")
  variables       String?        // JSON as string
  icon            String?
  gradient        String?
  tags            String         @default("[]") // JSON array as string
  isPublic        Boolean        @default(true) @map("is_public")
  isFeatured      Boolean        @default(false) @map("is_featured")
  createdBy       String?        @map("created_by")
  usageCount      Int            @default(0) @map("usage_count")
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @default(now()) @updatedAt @map("updated_at")
  creator         User?          @relation(fields: [createdBy], references: [id])
  favorites       TemplateFavorite[]

  @@map("prompt_templates")
}

model TemplateFavorite {
  id         String         @id @default(cuid())
  userId     String         @map("user_id")
  templateId String         @map("template_id")
  createdAt  DateTime       @default(now()) @map("created_at")
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  template   PromptTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([userId, templateId])
  @@map("template_favorites")
}

model UserUsage {
  id               String   @id @default(cuid())
  userId           String   @map("user_id")
  modelId          String   @map("model_id")
  date             DateTime
  messagesCount    Int      @default(0) @map("messages_count")
  inputTokensUsed  Int      @default(0) @map("input_tokens_used")
  outputTokensUsed Int      @default(0) @map("output_tokens_used")
  costIncurred     Float    @default(0) @map("cost_incurred")
  createdAt        DateTime @default(now()) @map("created_at")
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, modelId, date])
  @@map("user_usage")
}

model Payment {
  id            String   @id @default(cuid())
  userId        String   @map("user_id")
  amount        Float
  currency      String   @default("BRL")
  status        String   // "PENDING", "COMPLETED", "FAILED", "REFUNDED"
  paymentMethod String?  @map("payment_method")
  transactionId String?  @map("transaction_id")
  metadata      String?  // JSON as string
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Subscription {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  planType          String   @map("plan_type")
  status            String   // "ACTIVE", "CANCELLED", "EXPIRED", "PAST_DUE"
  currentPeriodStart DateTime @map("current_period_start")
  currentPeriodEnd   DateTime @map("current_period_end")
  cancelAtPeriodEnd  Boolean  @default(false) @map("cancel_at_period_end")
  stripeSubscriptionId String? @unique @map("stripe_subscription_id")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model ToolUsage {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  toolName  String   @map("tool_name")
  usageData String?  @map("usage_data") // JSON as string
  cost      Float    @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tool_usage")
}

model MessageFeedback {
  id        String   @id @default(cuid())
  messageId String   @map("message_id")
  userId    String   @map("user_id")
  rating    Int      // 1-5 stars
  feedback  String?
  createdAt DateTime @default(now()) @map("created_at")
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@map("message_feedback")
}

model KnowledgeBase {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  title       String
  content     String
  type        String   // "DOCUMENT", "WEBPAGE", "TEXT", "FAQ"
  metadata    String?  // JSON as string
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("knowledge_base")
}

model CreditTransaction {
  id            String   @id @default(cuid())
  userId        String   @map("user_id")
  type          String   // "PURCHASE", "CONSUMPTION", "BONUS", "REFUND"
  amount        Int
  description   String?
  relatedId     String?  @map("related_id")
  createdAt     DateTime @default(now()) @map("created_at")
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("credit_transactions")
}
