// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Core User Model
model User {
  id           String    @id @default(cuid())
  email        String    @unique
  name         String?
  passwordHash String?   @map("password_hash")
  planType     PlanType  @default(FREE) @map("plan_type")
  profileImage String?   @map("profile_image")
  profession   String?
  organization String?
  isActive     Boolean   @default(true) @map("is_active")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Relations
  conversations    Conversation[]
  userUsage        UserUsage[]
  subscriptions    Subscription[]
  payments         Payment[]
  promptTemplates  PromptTemplate[]
  toolUsage        ToolUsage[]
  messageFeedback  MessageFeedback[]

  @@map("users")
}

// User Sessions for auth
model UserSession {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("user_sessions")
}

// AI Models Available
model AIModel {
  id                 String   @id @default(cuid())
  name               String   @unique
  provider           AIProvider
  costPerInputToken  Decimal  @map("cost_per_input_token") @db.Decimal(10, 6)
  costPerOutputToken Decimal  @map("cost_per_output_token") @db.Decimal(10, 6)
  maxContextLength   Int      @map("max_context_length")
  isActive           Boolean  @default(true) @map("is_active")
  planRequired       PlanType @map("plan_required")
  createdAt          DateTime @default(now()) @map("created_at")

  // Relations
  conversations Conversation[]
  messages      Message[]
  userUsage     UserUsage[]
  errorLogs     AIErrorLog[]
  responseCache AIResponseCache[]

  @@map("ai_models")
}

// User Usage Tracking
model UserUsage {
  id               String   @id @default(cuid())
  userId           String   @map("user_id")
  modelId          String   @map("model_id")
  date             DateTime @db.Date
  messagesCount    Int      @default(0) @map("messages_count")
  inputTokensUsed  Int      @default(0) @map("input_tokens_used")
  outputTokensUsed Int      @default(0) @map("output_tokens_used")
  costIncurred     Decimal  @default(0) @map("cost_incurred") @db.Decimal(10, 4)
  createdAt        DateTime @default(now()) @map("created_at")

  // Relations
  user  User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  model AIModel @relation(fields: [modelId], references: [id])

  @@unique([userId, modelId, date])
  @@map("user_usage")
}

// Plan Limits Configuration
model PlanLimit {
  id                   String   @id @default(cuid())
  planType             PlanType @unique @map("plan_type")
  dailyMessagesLimit   Int?     @map("daily_messages_limit")
  monthlyTokensLimit   Int?     @map("monthly_tokens_limit")
  modelsAllowed        Json     @map("models_allowed") // Array of model IDs
  featuresEnabled      Json     @map("features_enabled") // Features like voice, image, etc
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  @@map("plan_limits")
}

// Conversations/Chats
model Conversation {
  id         String    @id @default(cuid())
  userId     String    @map("user_id")
  title      String?
  modelUsed  String?   @map("model_used")
  isArchived Boolean   @default(false) @map("is_archived")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  model    AIModel?  @relation(fields: [modelUsed], references: [id])
  messages Message[]

  @@map("conversations")
}

// Individual Messages
model Message {
  id             String   @id @default(cuid())
  conversationId String   @map("conversation_id")
  role           MessageRole
  content        String   @db.Text
  tokensUsed     Int?     @map("tokens_used")
  modelUsed      String?  @map("model_used")
  metadata       Json?    // Prompt templates, attachments, etc
  createdAt      DateTime @default(now()) @map("created_at")

  // Relations
  conversation    Conversation      @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  model           AIModel?          @relation(fields: [modelUsed], references: [id])
  messageFeedback MessageFeedback[]

  @@map("messages")
}

// Prompt Templates
model PromptTemplate {
  id              String            @id @default(cuid())
  name            String
  description     String?           @db.Text
  category        PromptCategory
  templateContent String            @map("template_content") @db.Text
  variables       Json?             // Fields user can fill
  isPublic        Boolean           @default(true) @map("is_public")
  createdBy       String?           @map("created_by")
  usageCount      Int               @default(0) @map("usage_count")
  createdAt       DateTime          @default(now()) @map("created_at")

  // Relations
  creator User? @relation(fields: [createdBy], references: [id])

  @@map("prompt_templates")
}

// Tools (Voice, Transcription, etc)
model Tool {
  id           String   @id @default(cuid())
  name         String
  type         ToolType
  apiEndpoint  String?  @map("api_endpoint")
  costPerUse   Decimal  @map("cost_per_use") @db.Decimal(8, 4)
  planRequired PlanType @map("plan_required")
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  toolUsage ToolUsage[]

  @@map("tools")
}

// Tool Usage Tracking
model ToolUsage {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  toolId       String   @map("tool_id")
  date         DateTime @db.Date
  usesCount    Int      @default(0) @map("uses_count")
  costIncurred Decimal  @default(0) @map("cost_incurred") @db.Decimal(10, 4)
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  tool Tool @relation(fields: [toolId], references: [id])

  @@unique([userId, toolId, date])
  @@map("tool_usage")
}

// Subscriptions
model Subscription {
  id                   String           @id @default(cuid())
  userId               String           @map("user_id")
  planType             PlanType         @map("plan_type")
  status               SubscriptionStatus
  stripeSubscriptionId String?          @unique @map("stripe_subscription_id")
  startedAt            DateTime         @map("started_at")
  expiresAt            DateTime?        @map("expires_at")
  createdAt            DateTime         @default(now()) @map("created_at")
  updatedAt            DateTime         @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

// Payment History
model Payment {
  id              String        @id @default(cuid())
  userId          String        @map("user_id")
  amount          Decimal       @db.Decimal(10, 2)
  currency        String        @default("BRL") @db.VarChar(3)
  status          PaymentStatus
  stripePaymentId String?       @unique @map("stripe_payment_id")
  createdAt       DateTime      @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

// AI Response Cache
model AIResponseCache {
  id           String   @id @default(cuid())
  requestHash  String   @unique @map("request_hash")
  responseContent String @map("response_content") @db.Text
  modelId      String   @map("model_id")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  model AIModel @relation(fields: [modelId], references: [id], onDelete: Cascade)

  @@map("ai_response_cache")
}

// AI Error Logs
model AIErrorLog {
  id             String   @id @default(cuid())
  userId         String   @map("user_id")
  modelId        String   @map("model_id")
  errorMessage   String   @map("error_message") @db.Text
  requestPayload Json?    @map("request_payload")
  createdAt      DateTime @default(now()) @map("created_at")

  // Relations
  model AIModel @relation(fields: [modelId], references: [id], onDelete: Cascade)

  @@map("ai_error_logs")
}

// User Feedback on Messages
model MessageFeedback {
  id        String   @id @default(cuid())
  messageId String   @map("message_id")
  userId    String   @map("user_id")
  rating    Int?     // 1-5 star rating
  comment   String?  @db.Text
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@map("user_feedback")
}

// Enums
enum PlanType {
  FREE
  PRO
  ENTERPRISE
}

enum AIProvider {
  OPENAI
  OPENROUTER
  ANTHROPIC
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum PromptCategory {
  TRABALHO
  MARKETING
  DESIGN
  VENDAS
  OPERACOES
  FINANCAS
  ENGENHARIA
  CRIADOR_CONTEUDO
  RECURSOS_HUMANOS
}

enum ToolType {
  VOICE_GENERATION
  TRANSCRIPTION
  SOUND_EFFECTS
  IMAGE_GENERATION
  OTHER
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PAST_DUE
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}