generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String            @id @default(cuid())
  email           String            @unique
  name            String?
  passwordHash    String?           @map("password_hash")
  planType        PlanType          @default(FREE) @map("plan_type")
  profileImage    String?           @map("profile_image")
  profession      String?
  organization    String?
  usageType       UsageType?        @map("usage_type")
  professionCategory String?        @map("profession_category")
  phone           String?
  onboardingCompleted Boolean       @default(false) @map("onboarding_completed")
  isActive        Boolean           @default(true) @map("is_active")
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  conversations   Conversation[]
  payments        Payment[]
  promptTemplates PromptTemplate[]
  subscriptions   Subscription[]
  toolUsage       ToolUsage[]
  messageFeedback MessageFeedback[]
  userUsage       UserUsage[]
  templateFavorites TemplateFavorite[]
  knowledgeBase   KnowledgeBase[]

  @@map("users")
}

model UserSession {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("user_sessions")
}

model AIModel {
  id                 String            @id @default(cuid())
  name               String            @unique
  provider           AIProvider
  costPerInputToken  Decimal           @map("cost_per_input_token") @db.Decimal(10, 6)
  costPerOutputToken Decimal           @map("cost_per_output_token") @db.Decimal(10, 6)
  maxContextLength   Int               @map("max_context_length")
  isActive           Boolean           @default(true) @map("is_active")
  planRequired       PlanType          @map("plan_required")
  createdAt          DateTime          @default(now()) @map("created_at")
  errorLogs          AIErrorLog[]
  responseCache      AIResponseCache[]
  conversations      Conversation[]
  messages           Message[]
  userUsage          UserUsage[]

  @@map("ai_models")
}

model UserUsage {
  id               String   @id @default(cuid())
  userId           String   @map("user_id")
  modelId          String   @map("model_id")
  date             DateTime @db.Date
  messagesCount    Int      @default(0) @map("messages_count")
  inputTokensUsed  Int      @default(0) @map("input_tokens_used")
  outputTokensUsed Int      @default(0) @map("output_tokens_used")
  costIncurred     Decimal  @default(0) @map("cost_incurred") @db.Decimal(10, 4)
  createdAt        DateTime @default(now()) @map("created_at")
  model            AIModel  @relation(fields: [modelId], references: [id])
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, modelId, date])
  @@map("user_usage")
}

model PlanLimit {
  id                 String   @id @default(cuid())
  planType           PlanType @unique @map("plan_type")
  dailyMessagesLimit Int?     @map("daily_messages_limit")
  monthlyTokensLimit Int?     @map("monthly_tokens_limit")
  modelsAllowed      Json     @map("models_allowed")
  featuresEnabled    Json     @map("features_enabled")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  @@map("plan_limits")
}

model Conversation {
  id         String    @id @default(cuid())
  userId     String    @map("user_id")
  title      String?
  modelUsed  String?   @map("model_used")
  isArchived Boolean   @default(false) @map("is_archived")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  model      AIModel?  @relation(fields: [modelUsed], references: [id])
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages   Message[]

  @@map("conversations")
}

model Message {
  id              String            @id @default(cuid())
  conversationId  String            @map("conversation_id")
  role            MessageRole
  content         String
  tokensUsed      Int?              @map("tokens_used")
  modelUsed       String?           @map("model_used")
  metadata        Json?
  createdAt       DateTime          @default(now()) @map("created_at")
  conversation    Conversation      @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  model           AIModel?          @relation(fields: [modelUsed], references: [id])
  messageFeedback MessageFeedback[]

  @@map("messages")
}

model PromptTemplate {
  id              String         @id @default(cuid())
  name            String
  description     String?
  category        PromptCategory
  templateContent String         @map("template_content")
  variables       Json?
  icon            String?
  gradient        String?
  tags            String[]       @default([])
  isPublic        Boolean        @default(true) @map("is_public")
  isFeatured      Boolean        @default(false) @map("is_featured")
  createdBy       String?        @map("created_by")
  usageCount      Int            @default(0) @map("usage_count")
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @default(now()) @updatedAt @map("updated_at")
  creator         User?          @relation(fields: [createdBy], references: [id])
  favorites       TemplateFavorite[]

  @@map("prompt_templates")
}

model Tool {
  id           String      @id @default(cuid())
  name         String
  type         ToolType
  apiEndpoint  String?     @map("api_endpoint")
  costPerUse   Decimal     @map("cost_per_use") @db.Decimal(8, 4)
  planRequired PlanType    @map("plan_required")
  isActive     Boolean     @default(true) @map("is_active")
  createdAt    DateTime    @default(now()) @map("created_at")
  toolUsage    ToolUsage[]

  @@map("tools")
}

model ToolUsage {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  toolId       String   @map("tool_id")
  date         DateTime @db.Date
  usesCount    Int      @default(0) @map("uses_count")
  costIncurred Decimal  @default(0) @map("cost_incurred") @db.Decimal(10, 4)
  createdAt    DateTime @default(now()) @map("created_at")
  tool         Tool     @relation(fields: [toolId], references: [id])
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, toolId, date])
  @@map("tool_usage")
}

model Subscription {
  id                   String             @id @default(cuid())
  userId               String             @map("user_id")
  planType             PlanType           @map("plan_type")
  status               SubscriptionStatus
  stripeSubscriptionId String?            @unique @map("stripe_subscription_id")
  stripeCustomerId     String?            @map("stripe_customer_id")
  mercadoPagoPaymentId String?            @map("mercado_pago_payment_id")
  startedAt            DateTime           @map("started_at")
  expiresAt            DateTime?          @map("expires_at")
  createdAt            DateTime           @default(now()) @map("created_at")
  updatedAt            DateTime           @updatedAt @map("updated_at")
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Payment {
  id                   String        @id @default(cuid())
  userId               String        @map("user_id")
  amount               Decimal       @db.Decimal(10, 2)
  currency             String        @default("BRL") @db.VarChar(3)
  status               PaymentStatus
  stripePaymentId      String?       @unique @map("stripe_payment_id")
  mercadoPagoPaymentId String?       @unique @map("mercado_pago_payment_id")
  createdAt            DateTime      @default(now()) @map("created_at")
  user                 User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model AIResponseCache {
  id              String   @id @default(cuid())
  requestHash     String   @unique @map("request_hash")
  responseContent String   @map("response_content")
  modelId         String   @map("model_id")
  createdAt       DateTime @default(now()) @map("created_at")
  model           AIModel  @relation(fields: [modelId], references: [id], onDelete: Cascade)

  @@map("ai_response_cache")
}

model AIErrorLog {
  id             String   @id @default(cuid())
  userId         String   @map("user_id")
  modelId        String   @map("model_id")
  errorMessage   String   @map("error_message")
  requestPayload Json?    @map("request_payload")
  createdAt      DateTime @default(now()) @map("created_at")
  model          AIModel  @relation(fields: [modelId], references: [id], onDelete: Cascade)

  @@map("ai_error_logs")
}

model MessageFeedback {
  id        String   @id @default(cuid())
  messageId String   @map("message_id")
  userId    String   @map("user_id")
  rating    Int?
  comment   String?
  createdAt DateTime @default(now()) @map("created_at")
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@map("user_feedback")
}

enum PlanType {
  FREE
  LITE
  PRO
  ENTERPRISE
}

enum AIProvider {
  OPENAI
  OPENROUTER
  ANTHROPIC
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum PromptCategory {
  TRABALHO
  MARKETING
  DESIGN
  VENDAS
  OPERACOES
  FINANCAS
  ENGENHARIA
  CRIADOR_CONTEUDO
  RECURSOS_HUMANOS
}

enum ToolType {
  VOICE_GENERATION
  TRANSCRIPTION
  SOUND_EFFECTS
  IMAGE_GENERATION
  OTHER
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PAST_DUE
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum UsageType {
  TRABALHO
  USO_PESSOAL
  ESCOLA
}

model TemplateFavorite {
  id         String          @id @default(cuid())
  userId     String          @map("user_id")
  templateId String          @map("template_id")
  createdAt  DateTime        @default(now()) @map("created_at")
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  template   PromptTemplate  @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([userId, templateId])
  @@map("template_favorites")
}

model KnowledgeBase {
  id            String            @id @default(cuid())
  userId        String            @map("user_id")
  name          String
  description   String?
  type          KnowledgeBaseType
  content       String            @db.Text
  metadata      Json?
  isActive      Boolean           @default(true) @map("is_active")
  embeddingId   String?           @map("embedding_id")
  fileSize      Int?              @map("file_size")
  mimeType      String?           @map("mime_type")
  originalName  String?           @map("original_name")
  createdAt     DateTime          @default(now()) @map("created_at")
  updatedAt     DateTime          @updatedAt @map("updated_at")
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isActive])
  @@map("knowledge_base")
}

enum KnowledgeBaseType {
  DOCUMENT
  WEBPAGE
  TEXT
  FAQ
}
